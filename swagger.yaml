openapi: 3.0.3
info:
  title: Airplane Booking System API
  version: 1.0.0
  description: |
    This RESTful API allows users to search and book flights, manage their bookings, and handle user authentication and registration.
    - **User authentication:** Supports JWT login/register and Google OAuth.
    - **Booking management:** Users can create, view, update, and cancel bookings.
    - **Flight search:** Users can search all flights or get details of a specific flight.
    - **User management:** Users can retrieve, update, or delete their account.

servers:
  - url: http://localhost:3000

tags:
  - name: Flights
    description: Operations related to searching and retrieving flights.
  - name: Auth
    description: User registration, login, and OAuth flows.
  - name: User
    description: User profile management.
  - name: Booking
    description: Booking creation, retrieval, update, and cancellation.

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      required: [name, email]
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          example: "john@example.com"
        password:
          type: string
          writeOnly: true
        googleId:
          type: string
        number:
          type: string
          example: "+123456789"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Booking:
      type: object
      required: [flightNumber, airline, flightDate, depIata, arrIata]
      properties:
        id:
          type: integer
          readOnly: true
        flightNumber:
          type: string
          example: "AI202"
        airline:
          type: string
          example: "Air India"
        flightDate:
          type: string
          format: date
          example: "2025-07-01"
        depIata:
          type: string
          example: "DEL"
        arrIata:
          type: string
          example: "BOM"
        depTime:
          type: string
          example: "10:00"
        arrTime:
          type: string
          example: "12:00"
        tier:
          type: string
          example: "Economy"
        seat:
          type: string
          example: "12A"
        status:
          type: string
          example: "CONFIRMED"
        bookingDate:
          type: string
          format: date-time
        userId:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Error:
      type: object
      properties:
        message:
          type: string
          example: "Error message describing what went wrong."

security:
  - bearerAuth: []

paths:
  /api/flights/search:
    get:
      tags: [Flights]
      summary: Search all flights
      description: Retrieve all available flights matching optional query parameters.
      responses:
        '200':
          description: List of flights
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    flightNumber:
                      type: string
                    airline:
                      type: string
                    flightDate:
                      type: string
                    depIata:
                      type: string
                    arrIata:
                      type: string
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/flights/getone:
    get:
      tags: [Flights]
      summary: Get a specific flight
      description: Retrieve details for a single flight using query parameters (e.g., flight number).
      parameters:
        - name: flightNumber
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Flight detail
          content:
            application/json:
              schema:
                type: object
        '404':
          description: Flight not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/google:
    get:
      tags: [Auth]
      summary: Google OAuth login
      description: Redirects user to Google OAuth login and returns to callback with JWT upon success.
      responses:
        '302':
          description: Redirect to Google OAuth provider

  /auth/google/callback:
    get:
      tags: [Auth]
      summary: Google OAuth callback
      description: Handles OAuth callback from Google and issues a JWT.
      responses:
        '200':
          description: JWT token and user info
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  name:
                    type: string
                  email:
                    type: string
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/login:
    post:
      tags: [Auth]
      summary: User login (JWT)
      description: Login with email and password to receive a JWT token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: JWT token and user info
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  name:
                    type: string
                  email:
                    type: string
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/register:
    post:
      tags: [Auth]
      summary: User registration
      description: Register a new user account with name, email, and password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: Registered user details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Email already exists or invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /user/update:
    patch:
      tags: [User]
      summary: Update user profile
      description: Update the authenticated user's profile information.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Updated user info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /user/delete:
    delete:
      tags: [User]
      summary: Delete user account
      description: Permanently deletes the authenticated user's account.
      security:
        - bearerAuth: []
      responses:
        '204':
          description: User deleted successfully (no content)
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /user/get:
    get:
      tags: [User]
      summary: Get current user details
      description: Retrieve the authenticated user's details.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /booking:
    get:
      tags: [Booking]
      summary: Get all bookings for current user
      description: Retrieve all bookings belonging to the authenticated user.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of bookings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Booking'
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags: [Booking]
      summary: Create a new booking
      description: Book a flight for the authenticated user.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Booking'
      responses:
        '201':
          description: Booking created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /booking/{id}:
    get:
      tags: [Booking]
      summary: Get booking by ID
      description: Retrieve the details of a specific booking by its ID for the authenticated user.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Booking details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
        '404':
          description: Booking not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags: [Booking]
      summary: Update booking by ID
      description: Update an existing booking by its ID.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Booking'
      responses:
        '200':
          description: Booking updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
        '404':
          description: Booking not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags: [Booking]
      summary: Cancel booking by ID
      description: Cancel (delete) a specific booking by its ID.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Booking canceled (no content)
        '404':
          description: Booking not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'