openapi: 3.0.3
info:
  title: Airplane Booking System API
  version: 1.0.0
  description: |
    RESTful API for searching flights, booking, user management, and authentication (JWT & Google OAuth).
    - **No seat booking or payment.**
    - Flight data is informational; bookings are recorded in the system.
    - See /api-docs for interactive docs.

servers:
  - url: http://localhost:3000

tags:
  - name: Flights
    description: Search and retrieve flights.
  - name: Auth
    description: Registration, login, OAuth.
  - name: User
    description: Profile management.
  - name: Booking
    description: Booking creation, update, cancel.

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          example: "john@example.com"
        password:
          type: string
          writeOnly: true
        googleId:
          type: string
        number:
          type: string
          example: "+123456789"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Booking:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        flightNumber:
          type: string
          example: "AI202"
        airline:
          type: string
          example: "Air India"
        flightDate:
          type: string
          example: "2025-07-01"
        depIata:
          type: string
          example: "DEL"
        arrIata:
          type: string
          example: "BOM"
        depTime:
          type: string
          example: "10:00"
        arrTime:
          type: string
          example: "12:00"
        tier:
          type: string
          example: "Economy"
        status:
          type: string
          example: "CONFIRMED"
        bookingDate:
          type: string
          format: date-time
        userId:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Error:
      type: object
      properties:
        message:
          type: string
          example: "Error message describing what went wrong."

security:
  - bearerAuth: []

paths:
  /api/flights/search:
    get:
      tags: [Flights]
      summary: Search all flights
      description: Retrieve available flights. Requires from, fromLocal, to, toLocal (in body; see docs)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                from:
                  type: string
                  description: Departure IATA code
                fromLocal:
                  type: string
                  description: Start local datetime (YYYY-MM-DDTHH:mm)
                to:
                  type: string
                  description: Arrival IATA code
                toLocal:
                  type: string
                  description: End local datetime (YYYY-MM-DDTHH:mm)
      responses:
        '200':
          description: List of filtered flights
          content:
            application/json:
              schema:
                type: object
                properties:
                  filteredFlights:
                    type: array
                    items:
                      type: object
                      properties:
                        flightNumber: { type: string }
                        airline:
                          type: object
                          properties:
                            name: { type: string }
                            code: { type: string }
                        departure:
                          type: object
                          properties:
                            airport: { type: string }
                        arrival:
                          type: object
                          properties:
                            airport: { type: string }
                            airportName: { type: string }
                        aircraft:
                          type: object
                          properties:
                            model: { type: string }
                            registration: { type: string }
                        status: { type: string }
                        duration: { type: string }
        '500':
          description: Server error
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

  /api/flights/searchone:
    get:
      tags: [Flights]
      summary: Get a specific flight
      description: Retrieve details for a single flight using id (flight number) and date.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: Flight number
                date:
                  type: string
                  description: Date (YYYY-MM-DD)
      responses:
        '200':
          description: Flight detail(s)
          content:
            application/json:
              schema:
                type: object
                properties:
                  flights:
                    type: array
                    items:
                      type: object
                      properties:
                        flightNumber: { type: string }
                        airline: { type: string }
                        status: { type: string }
                        from:
                          type: object
                          properties:
                            airport: { type: string }
                            city: { type: string }
                            time: { type: string }
                            terminal: { type: string }
                        to:
                          type: object
                          properties:
                            airport: { type: string }
                            city: { type: string }
                            time: { type: string }
                            actualTime: { type: string }
                            terminal: { type: string }
                            gate: { type: string }
                        aircraft: { type: string }
                        distance: { type: string }
                        duration: { type: string }
        '404':
          description: Flight not found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

  /auth/google:
    get:
      tags: [Auth]
      summary: Google OAuth login
      description: Redirects user to Google OAuth login.
      responses:
        '302':
          description: Redirect to Google OAuth provider

  /auth/google/callback:
    get:
      tags: [Auth]
      summary: Google OAuth callback
      description: Handles OAuth callback and issues a JWT.
      responses:
        '200':
          description: JWT token and user info
          content:
            application/json:
              schema:
                type: object
                properties:
                  token: { type: string }
                  name: { type: string }
                  email: { type: string }
        '401':
          description: Authentication failed
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

  /auth/login:
    post:
      tags: [Auth]
      summary: User login (JWT)
      description: Login with email and password to receive a JWT.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email: { type: string }
                password: { type: string }
      responses:
        '200':
          description: JWT token and user info
          content:
            application/json:
              schema:
                type: object
                properties:
                  token: { type: string }
                  name: { type: string }
                  email: { type: string }
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

  /auth/register:
    post:
      tags: [Auth]
      summary: User registration
      description: Register a new user account.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, email, password]
              properties:
                name: { type: string }
                email: { type: string }
                password: { type: string }
                number: { type: string }
      responses:
        '201':
          description: Registered user details
          content:
            application/json:
              schema:
                type: object
                properties:
                  token: { type: string }
                  name: { type: string }
                  email: { type: string }
        '400':
          description: Email already exists or invalid input
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

  /user/update:
    patch:
      tags: [User]
      summary: Update user profile
      description: Update the authenticated user's profile.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                email: { type: string }
                number: { type: string }
                password: { type: string }
      responses:
        '200':
          description: Updated user info
          content:
            application/json:
              schema: { $ref: '#/components/schemas/User' }
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

  /user/delete:
    delete:
      tags: [User]
      summary: Delete user account
      description: Permanently deletes the authenticated user's account.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

  /user/get:
    get:
      tags: [User]
      summary: Get current user details
      description: Retrieve the authenticated user's details.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile information
          content:
            application/json:
              schema: { $ref: '#/components/schemas/User' }
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

  /booking:
    get:
      tags: [Booking]
      summary: Get all bookings for current user
      description: Retrieve all bookings for the authenticated user.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of bookings
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Booking' }
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
    post:
      tags: [Booking]
      summary: Create a new booking
      description: Book a flight for the authenticated user.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [flightNumber, airline, flightDate, depIata, arrIata]
              properties:
                flightNumber: { type: string }
                airline: { type: string }
                flightDate: { type: string }
                depIata: { type: string }
                arrIata: { type: string }
                depTime: { type: string }
                arrTime: { type: string }
                tier: { type: string }
      responses:
        '201':
          description: Booking created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Booking' }
        '400':
          description: Invalid input
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

  /booking/{id}:
    get:
      tags: [Booking]
      summary: Get booking by ID
      description: Retrieve a specific booking by its ID.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Booking details
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Booking' }
        '404':
          description: Booking not found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
    patch:
      tags: [Booking]
      summary: Update booking by ID
      description: Update an existing booking by its ID (only tier can be changed).
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tier: { type: string }
      responses:
        '200':
          description: Booking updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Booking' }
        '404':
          description: Booking not found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
    delete:
      tags: [Booking]
      summary: Cancel booking by ID
      description: Cancel (sets status to "cancelled") a booking by its ID.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Booking cancelled
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
        '404':
          description: Booking not found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }